Grading at Sun Jun 28 13:23:28 UTC 2020
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==133== Memcheck, a memory error detector
==133== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==133== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==133== Command: ./test-eval inp.1.txt
==133== Parent PID: 132
==133== 
==133== Invalid read of size 8
==133==    at 0x4017AD: is_straight_at (eval.c:81)
==133==    by 0x402681: describe_hand (test-eval.c:49)
==133==    by 0x402A27: main (test-eval.c:116)
==133==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==133==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==133==    by 0x40103C: add_card_to (deck-c4.c:29)
==133==    by 0x403209: hand_from_string (input.c:49)
==133==    by 0x4029AC: main (test-eval.c:110)
==133== 
==133== Invalid read of size 4
==133==    at 0x4017B0: is_straight_at (eval.c:81)
==133==    by 0x402681: describe_hand (test-eval.c:49)
==133==    by 0x402A27: main (test-eval.c:116)
==133==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==133== 
==133== 
==133== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==133==  Access not within mapped region at address 0x0
==133==    at 0x4017B0: is_straight_at (eval.c:81)
==133==    by 0x402681: describe_hand (test-eval.c:49)
==133==    by 0x402A27: main (test-eval.c:116)
==133==  If you believe this happened as a result of a stack
==133==  overflow in your program's main thread (unlikely but
==133==  possible), you can try to increase the size of the
==133==  main thread stack using the --main-stacksize= flag.
==133==  The main thread stack size used in this run was 8388608.
==133== 
==133== HEAP SUMMARY:
==133==     in use at exit: 896 bytes in 18 blocks
==133==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==133== 
==133== LEAK SUMMARY:
==133==    definitely lost: 0 bytes in 0 blocks
==133==    indirectly lost: 0 bytes in 0 blocks
==133==      possibly lost: 0 bytes in 0 blocks
==133==    still reachable: 896 bytes in 18 blocks
==133==         suppressed: 0 bytes in 0 blocks
==133== Rerun with --leak-check=full to see details of leaked memory
==133== 
==133== For counts of detected and suppressed errors, rerun with: -v
==133== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==138== Memcheck, a memory error detector
==138== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==138== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==138== Command: ./test-eval inp.2.txt
==138== Parent PID: 137
==138== 
==138== Invalid read of size 8
==138==    at 0x4017AD: is_straight_at (eval.c:81)
==138==    by 0x402681: describe_hand (test-eval.c:49)
==138==    by 0x402A27: main (test-eval.c:116)
==138==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==138==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==138==    by 0x40103C: add_card_to (deck-c4.c:29)
==138==    by 0x403209: hand_from_string (input.c:49)
==138==    by 0x4029AC: main (test-eval.c:110)
==138== 
==138== Invalid read of size 4
==138==    at 0x4017B0: is_straight_at (eval.c:81)
==138==    by 0x402681: describe_hand (test-eval.c:49)
==138==    by 0x402A27: main (test-eval.c:116)
==138==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==138== 
==138== 
==138== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==138==  Access not within mapped region at address 0x0
==138==    at 0x4017B0: is_straight_at (eval.c:81)
==138==    by 0x402681: describe_hand (test-eval.c:49)
==138==    by 0x402A27: main (test-eval.c:116)
==138==  If you believe this happened as a result of a stack
==138==  overflow in your program's main thread (unlikely but
==138==  possible), you can try to increase the size of the
==138==  main thread stack using the --main-stacksize= flag.
==138==  The main thread stack size used in this run was 8388608.
==138== 
==138== HEAP SUMMARY:
==138==     in use at exit: 880 bytes in 17 blocks
==138==   total heap usage: 28 allocs, 11 frees, 9,272 bytes allocated
==138== 
==138== LEAK SUMMARY:
==138==    definitely lost: 0 bytes in 0 blocks
==138==    indirectly lost: 0 bytes in 0 blocks
==138==      possibly lost: 0 bytes in 0 blocks
==138==    still reachable: 880 bytes in 17 blocks
==138==         suppressed: 0 bytes in 0 blocks
==138== Rerun with --leak-check=full to see details of leaked memory
==138== 
==138== For counts of detected and suppressed errors, rerun with: -v
==138== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==143== Memcheck, a memory error detector
==143== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==143== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==143== Command: ./test-eval inp.3.txt
==143== Parent PID: 142
==143== 
==143== Invalid read of size 8
==143==    at 0x4017AD: is_straight_at (eval.c:81)
==143==    by 0x402681: describe_hand (test-eval.c:49)
==143==    by 0x402A27: main (test-eval.c:116)
==143==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==143==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==143==    by 0x40103C: add_card_to (deck-c4.c:29)
==143==    by 0x403209: hand_from_string (input.c:49)
==143==    by 0x4029AC: main (test-eval.c:110)
==143== 
==143== Invalid read of size 4
==143==    at 0x4017B0: is_straight_at (eval.c:81)
==143==    by 0x402681: describe_hand (test-eval.c:49)
==143==    by 0x402A27: main (test-eval.c:116)
==143==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==143== 
==143== 
==143== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==143==  Access not within mapped region at address 0x0
==143==    at 0x4017B0: is_straight_at (eval.c:81)
==143==    by 0x402681: describe_hand (test-eval.c:49)
==143==    by 0x402A27: main (test-eval.c:116)
==143==  If you believe this happened as a result of a stack
==143==  overflow in your program's main thread (unlikely but
==143==  possible), you can try to increase the size of the
==143==  main thread stack using the --main-stacksize= flag.
==143==  The main thread stack size used in this run was 8388608.
==143== 
==143== HEAP SUMMARY:
==143==     in use at exit: 864 bytes in 16 blocks
==143==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==143== 
==143== LEAK SUMMARY:
==143==    definitely lost: 0 bytes in 0 blocks
==143==    indirectly lost: 0 bytes in 0 blocks
==143==      possibly lost: 0 bytes in 0 blocks
==143==    still reachable: 864 bytes in 16 blocks
==143==         suppressed: 0 bytes in 0 blocks
==143== Rerun with --leak-check=full to see details of leaked memory
==143== 
==143== For counts of detected and suppressed errors, rerun with: -v
==143== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==148== Memcheck, a memory error detector
==148== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==148== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==148== Command: ./test-eval inp.4.txt
==148== Parent PID: 147
==148== 
==148== Invalid read of size 8
==148==    at 0x4017AD: is_straight_at (eval.c:81)
==148==    by 0x402681: describe_hand (test-eval.c:49)
==148==    by 0x402A27: main (test-eval.c:116)
==148==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==148==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==148==    by 0x40103C: add_card_to (deck-c4.c:29)
==148==    by 0x403209: hand_from_string (input.c:49)
==148==    by 0x4029AC: main (test-eval.c:110)
==148== 
==148== Invalid read of size 4
==148==    at 0x4017B0: is_straight_at (eval.c:81)
==148==    by 0x402681: describe_hand (test-eval.c:49)
==148==    by 0x402A27: main (test-eval.c:116)
==148==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==148== 
==148== 
==148== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==148==  Access not within mapped region at address 0x0
==148==    at 0x4017B0: is_straight_at (eval.c:81)
==148==    by 0x402681: describe_hand (test-eval.c:49)
==148==    by 0x402A27: main (test-eval.c:116)
==148==  If you believe this happened as a result of a stack
==148==  overflow in your program's main thread (unlikely but
==148==  possible), you can try to increase the size of the
==148==  main thread stack using the --main-stacksize= flag.
==148==  The main thread stack size used in this run was 8388608.
==148== 
==148== HEAP SUMMARY:
==148==     in use at exit: 896 bytes in 18 blocks
==148==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==148== 
==148== LEAK SUMMARY:
==148==    definitely lost: 0 bytes in 0 blocks
==148==    indirectly lost: 0 bytes in 0 blocks
==148==      possibly lost: 0 bytes in 0 blocks
==148==    still reachable: 896 bytes in 18 blocks
==148==         suppressed: 0 bytes in 0 blocks
==148== Rerun with --leak-check=full to see details of leaked memory
==148== 
==148== For counts of detected and suppressed errors, rerun with: -v
==148== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==153== Memcheck, a memory error detector
==153== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==153== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==153== Command: ./test-eval inp.5.txt
==153== Parent PID: 152
==153== 
==153== Invalid read of size 8
==153==    at 0x4017AD: is_straight_at (eval.c:81)
==153==    by 0x402681: describe_hand (test-eval.c:49)
==153==    by 0x402A27: main (test-eval.c:116)
==153==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==153==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==153==    by 0x40103C: add_card_to (deck-c4.c:29)
==153==    by 0x403209: hand_from_string (input.c:49)
==153==    by 0x4029AC: main (test-eval.c:110)
==153== 
==153== Invalid read of size 4
==153==    at 0x4017B0: is_straight_at (eval.c:81)
==153==    by 0x402681: describe_hand (test-eval.c:49)
==153==    by 0x402A27: main (test-eval.c:116)
==153==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==153== 
==153== 
==153== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==153==  Access not within mapped region at address 0x0
==153==    at 0x4017B0: is_straight_at (eval.c:81)
==153==    by 0x402681: describe_hand (test-eval.c:49)
==153==    by 0x402A27: main (test-eval.c:116)
==153==  If you believe this happened as a result of a stack
==153==  overflow in your program's main thread (unlikely but
==153==  possible), you can try to increase the size of the
==153==  main thread stack using the --main-stacksize= flag.
==153==  The main thread stack size used in this run was 8388608.
==153== 
==153== HEAP SUMMARY:
==153==     in use at exit: 864 bytes in 16 blocks
==153==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==153== 
==153== LEAK SUMMARY:
==153==    definitely lost: 0 bytes in 0 blocks
==153==    indirectly lost: 0 bytes in 0 blocks
==153==      possibly lost: 0 bytes in 0 blocks
==153==    still reachable: 864 bytes in 16 blocks
==153==         suppressed: 0 bytes in 0 blocks
==153== Rerun with --leak-check=full to see details of leaked memory
==153== 
==153== For counts of detected and suppressed errors, rerun with: -v
==153== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==158== Memcheck, a memory error detector
==158== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==158== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==158== Command: ./test-eval inp.6.txt
==158== Parent PID: 157
==158== 
==158== Invalid read of size 8
==158==    at 0x401906: is_straight_at (eval.c:90)
==158==    by 0x40264A: describe_hand (test-eval.c:46)
==158==    by 0x402A27: main (test-eval.c:116)
==158==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==158==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==158==    by 0x40103C: add_card_to (deck-c4.c:29)
==158==    by 0x403209: hand_from_string (input.c:49)
==158==    by 0x4029AC: main (test-eval.c:110)
==158== 
==158== Invalid read of size 4
==158==    at 0x401909: is_straight_at (eval.c:90)
==158==    by 0x40264A: describe_hand (test-eval.c:46)
==158==    by 0x402A27: main (test-eval.c:116)
==158==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==158== 
==158== 
==158== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==158==  Access not within mapped region at address 0x0
==158==    at 0x401909: is_straight_at (eval.c:90)
==158==    by 0x40264A: describe_hand (test-eval.c:46)
==158==    by 0x402A27: main (test-eval.c:116)
==158==  If you believe this happened as a result of a stack
==158==  overflow in your program's main thread (unlikely but
==158==  possible), you can try to increase the size of the
==158==  main thread stack using the --main-stacksize= flag.
==158==  The main thread stack size used in this run was 8388608.
==158== 
==158== HEAP SUMMARY:
==158==     in use at exit: 896 bytes in 18 blocks
==158==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==158== 
==158== LEAK SUMMARY:
==158==    definitely lost: 0 bytes in 0 blocks
==158==    indirectly lost: 0 bytes in 0 blocks
==158==      possibly lost: 0 bytes in 0 blocks
==158==    still reachable: 896 bytes in 18 blocks
==158==         suppressed: 0 bytes in 0 blocks
==158== Rerun with --leak-check=full to see details of leaked memory
==158== 
==158== For counts of detected and suppressed errors, rerun with: -v
==158== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==163== Memcheck, a memory error detector
==163== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==163== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==163== Command: ./test-eval inp.7.txt
==163== Parent PID: 162
==163== 
==163== Invalid read of size 8
==163==    at 0x4017AD: is_straight_at (eval.c:81)
==163==    by 0x402681: describe_hand (test-eval.c:49)
==163==    by 0x402A27: main (test-eval.c:116)
==163==  Address 0x5205858 is 0 bytes after a block of size 56 alloc'd
==163==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==163==    by 0x40103C: add_card_to (deck-c4.c:29)
==163==    by 0x403209: hand_from_string (input.c:49)
==163==    by 0x4029AC: main (test-eval.c:110)
==163== 
==163== Invalid read of size 4
==163==    at 0x4017B0: is_straight_at (eval.c:81)
==163==    by 0x402681: describe_hand (test-eval.c:49)
==163==    by 0x402A27: main (test-eval.c:116)
==163==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==163== 
==163== 
==163== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==163==  Access not within mapped region at address 0x0
==163==    at 0x4017B0: is_straight_at (eval.c:81)
==163==    by 0x402681: describe_hand (test-eval.c:49)
==163==    by 0x402A27: main (test-eval.c:116)
==163==  If you believe this happened as a result of a stack
==163==  overflow in your program's main thread (unlikely but
==163==  possible), you can try to increase the size of the
==163==  main thread stack using the --main-stacksize= flag.
==163==  The main thread stack size used in this run was 8388608.
==163== 
==163== HEAP SUMMARY:
==163==     in use at exit: 928 bytes in 20 blocks
==163==   total heap usage: 34 allocs, 14 frees, 9,456 bytes allocated
==163== 
==163== LEAK SUMMARY:
==163==    definitely lost: 0 bytes in 0 blocks
==163==    indirectly lost: 0 bytes in 0 blocks
==163==      possibly lost: 0 bytes in 0 blocks
==163==    still reachable: 928 bytes in 20 blocks
==163==         suppressed: 0 bytes in 0 blocks
==163== Rerun with --leak-check=full to see details of leaked memory
==163== 
==163== For counts of detected and suppressed errors, rerun with: -v
==163== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==168== Memcheck, a memory error detector
==168== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==168== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==168== Command: ./test-eval inp.8.txt
==168== Parent PID: 167
==168== 
==168== Invalid read of size 8
==168==    at 0x4017AD: is_straight_at (eval.c:81)
==168==    by 0x402681: describe_hand (test-eval.c:49)
==168==    by 0x402A27: main (test-eval.c:116)
==168==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==168==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==168==    by 0x40103C: add_card_to (deck-c4.c:29)
==168==    by 0x403209: hand_from_string (input.c:49)
==168==    by 0x4029AC: main (test-eval.c:110)
==168== 
==168== Invalid read of size 4
==168==    at 0x4017B0: is_straight_at (eval.c:81)
==168==    by 0x402681: describe_hand (test-eval.c:49)
==168==    by 0x402A27: main (test-eval.c:116)
==168==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==168== 
==168== 
==168== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==168==  Access not within mapped region at address 0x0
==168==    at 0x4017B0: is_straight_at (eval.c:81)
==168==    by 0x402681: describe_hand (test-eval.c:49)
==168==    by 0x402A27: main (test-eval.c:116)
==168==  If you believe this happened as a result of a stack
==168==  overflow in your program's main thread (unlikely but
==168==  possible), you can try to increase the size of the
==168==  main thread stack using the --main-stacksize= flag.
==168==  The main thread stack size used in this run was 8388608.
==168== 
==168== HEAP SUMMARY:
==168==     in use at exit: 896 bytes in 18 blocks
==168==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==168== 
==168== LEAK SUMMARY:
==168==    definitely lost: 0 bytes in 0 blocks
==168==    indirectly lost: 0 bytes in 0 blocks
==168==      possibly lost: 0 bytes in 0 blocks
==168==    still reachable: 896 bytes in 18 blocks
==168==         suppressed: 0 bytes in 0 blocks
==168== Rerun with --leak-check=full to see details of leaked memory
==168== 
==168== For counts of detected and suppressed errors, rerun with: -v
==168== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==173== Memcheck, a memory error detector
==173== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==173== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==173== Command: ./test-eval inp.9.txt
==173== Parent PID: 172
==173== 
==173== Invalid read of size 8
==173==    at 0x401906: is_straight_at (eval.c:90)
==173==    by 0x40264A: describe_hand (test-eval.c:46)
==173==    by 0x402A27: main (test-eval.c:116)
==173==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==173==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==173==    by 0x40103C: add_card_to (deck-c4.c:29)
==173==    by 0x403209: hand_from_string (input.c:49)
==173==    by 0x4029AC: main (test-eval.c:110)
==173== 
==173== Invalid read of size 4
==173==    at 0x401909: is_straight_at (eval.c:90)
==173==    by 0x40264A: describe_hand (test-eval.c:46)
==173==    by 0x402A27: main (test-eval.c:116)
==173==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==173== 
==173== 
==173== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==173==  Access not within mapped region at address 0x0
==173==    at 0x401909: is_straight_at (eval.c:90)
==173==    by 0x40264A: describe_hand (test-eval.c:46)
==173==    by 0x402A27: main (test-eval.c:116)
==173==  If you believe this happened as a result of a stack
==173==  overflow in your program's main thread (unlikely but
==173==  possible), you can try to increase the size of the
==173==  main thread stack using the --main-stacksize= flag.
==173==  The main thread stack size used in this run was 8388608.
==173== 
==173== HEAP SUMMARY:
==173==     in use at exit: 864 bytes in 16 blocks
==173==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==173== 
==173== LEAK SUMMARY:
==173==    definitely lost: 0 bytes in 0 blocks
==173==    indirectly lost: 0 bytes in 0 blocks
==173==      possibly lost: 0 bytes in 0 blocks
==173==    still reachable: 864 bytes in 16 blocks
==173==         suppressed: 0 bytes in 0 blocks
==173== Rerun with --leak-check=full to see details of leaked memory
==173== 
==173== For counts of detected and suppressed errors, rerun with: -v
==173== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==178== Memcheck, a memory error detector
==178== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==178== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==178== Command: ./test-eval inp.10.txt
==178== Parent PID: 177
==178== 
==178== Invalid read of size 8
==178==    at 0x401906: is_straight_at (eval.c:90)
==178==    by 0x40264A: describe_hand (test-eval.c:46)
==178==    by 0x402A27: main (test-eval.c:116)
==178==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==178==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==178==    by 0x40103C: add_card_to (deck-c4.c:29)
==178==    by 0x403209: hand_from_string (input.c:49)
==178==    by 0x4029AC: main (test-eval.c:110)
==178== 
==178== Invalid read of size 4
==178==    at 0x401909: is_straight_at (eval.c:90)
==178==    by 0x40264A: describe_hand (test-eval.c:46)
==178==    by 0x402A27: main (test-eval.c:116)
==178==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==178== 
==178== 
==178== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==178==  Access not within mapped region at address 0x0
==178==    at 0x401909: is_straight_at (eval.c:90)
==178==    by 0x40264A: describe_hand (test-eval.c:46)
==178==    by 0x402A27: main (test-eval.c:116)
==178==  If you believe this happened as a result of a stack
==178==  overflow in your program's main thread (unlikely but
==178==  possible), you can try to increase the size of the
==178==  main thread stack using the --main-stacksize= flag.
==178==  The main thread stack size used in this run was 8388608.
==178== 
==178== HEAP SUMMARY:
==178==     in use at exit: 896 bytes in 18 blocks
==178==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==178== 
==178== LEAK SUMMARY:
==178==    definitely lost: 0 bytes in 0 blocks
==178==    indirectly lost: 0 bytes in 0 blocks
==178==      possibly lost: 0 bytes in 0 blocks
==178==    still reachable: 896 bytes in 18 blocks
==178==         suppressed: 0 bytes in 0 blocks
==178== Rerun with --leak-check=full to see details of leaked memory
==178== 
==178== For counts of detected and suppressed errors, rerun with: -v
==178== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
