Grading at Sun Jun 28 19:38:12 UTC 2020
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==178== Memcheck, a memory error detector
==178== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==178== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==178== Command: ./test-eval inp.1.txt
==178== Parent PID: 177
==178== 
==178== Invalid read of size 8
==178==    at 0x4017AD: is_straight_at (eval.c:81)
==178==    by 0x402688: describe_hand (test-eval.c:49)
==178==    by 0x402A2E: main (test-eval.c:116)
==178==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==178==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==178==    by 0x40103C: add_card_to (deck-c4.c:29)
==178==    by 0x403210: hand_from_string (input.c:49)
==178==    by 0x4029B3: main (test-eval.c:110)
==178== 
==178== Invalid read of size 4
==178==    at 0x4017B0: is_straight_at (eval.c:81)
==178==    by 0x402688: describe_hand (test-eval.c:49)
==178==    by 0x402A2E: main (test-eval.c:116)
==178==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==178== 
==178== 
==178== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==178==  Access not within mapped region at address 0x0
==178==    at 0x4017B0: is_straight_at (eval.c:81)
==178==    by 0x402688: describe_hand (test-eval.c:49)
==178==    by 0x402A2E: main (test-eval.c:116)
==178==  If you believe this happened as a result of a stack
==178==  overflow in your program's main thread (unlikely but
==178==  possible), you can try to increase the size of the
==178==  main thread stack using the --main-stacksize= flag.
==178==  The main thread stack size used in this run was 8388608.
==178== 
==178== HEAP SUMMARY:
==178==     in use at exit: 896 bytes in 18 blocks
==178==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==178== 
==178== LEAK SUMMARY:
==178==    definitely lost: 0 bytes in 0 blocks
==178==    indirectly lost: 0 bytes in 0 blocks
==178==      possibly lost: 0 bytes in 0 blocks
==178==    still reachable: 896 bytes in 18 blocks
==178==         suppressed: 0 bytes in 0 blocks
==178== Rerun with --leak-check=full to see details of leaked memory
==178== 
==178== For counts of detected and suppressed errors, rerun with: -v
==178== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==183== Memcheck, a memory error detector
==183== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==183== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==183== Command: ./test-eval inp.2.txt
==183== Parent PID: 182
==183== 
==183== Invalid read of size 8
==183==    at 0x4017AD: is_straight_at (eval.c:81)
==183==    by 0x402688: describe_hand (test-eval.c:49)
==183==    by 0x402A2E: main (test-eval.c:116)
==183==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==183==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==183==    by 0x40103C: add_card_to (deck-c4.c:29)
==183==    by 0x403210: hand_from_string (input.c:49)
==183==    by 0x4029B3: main (test-eval.c:110)
==183== 
==183== Invalid read of size 4
==183==    at 0x4017B0: is_straight_at (eval.c:81)
==183==    by 0x402688: describe_hand (test-eval.c:49)
==183==    by 0x402A2E: main (test-eval.c:116)
==183==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==183== 
==183== 
==183== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==183==  Access not within mapped region at address 0x0
==183==    at 0x4017B0: is_straight_at (eval.c:81)
==183==    by 0x402688: describe_hand (test-eval.c:49)
==183==    by 0x402A2E: main (test-eval.c:116)
==183==  If you believe this happened as a result of a stack
==183==  overflow in your program's main thread (unlikely but
==183==  possible), you can try to increase the size of the
==183==  main thread stack using the --main-stacksize= flag.
==183==  The main thread stack size used in this run was 8388608.
==183== 
==183== HEAP SUMMARY:
==183==     in use at exit: 880 bytes in 17 blocks
==183==   total heap usage: 28 allocs, 11 frees, 9,272 bytes allocated
==183== 
==183== LEAK SUMMARY:
==183==    definitely lost: 0 bytes in 0 blocks
==183==    indirectly lost: 0 bytes in 0 blocks
==183==      possibly lost: 0 bytes in 0 blocks
==183==    still reachable: 880 bytes in 17 blocks
==183==         suppressed: 0 bytes in 0 blocks
==183== Rerun with --leak-check=full to see details of leaked memory
==183== 
==183== For counts of detected and suppressed errors, rerun with: -v
==183== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==188== Memcheck, a memory error detector
==188== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==188== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==188== Command: ./test-eval inp.3.txt
==188== Parent PID: 187
==188== 
==188== Invalid read of size 8
==188==    at 0x4017AD: is_straight_at (eval.c:81)
==188==    by 0x402688: describe_hand (test-eval.c:49)
==188==    by 0x402A2E: main (test-eval.c:116)
==188==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==188==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==188==    by 0x40103C: add_card_to (deck-c4.c:29)
==188==    by 0x403210: hand_from_string (input.c:49)
==188==    by 0x4029B3: main (test-eval.c:110)
==188== 
==188== Invalid read of size 4
==188==    at 0x4017B0: is_straight_at (eval.c:81)
==188==    by 0x402688: describe_hand (test-eval.c:49)
==188==    by 0x402A2E: main (test-eval.c:116)
==188==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==188== 
==188== 
==188== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==188==  Access not within mapped region at address 0x0
==188==    at 0x4017B0: is_straight_at (eval.c:81)
==188==    by 0x402688: describe_hand (test-eval.c:49)
==188==    by 0x402A2E: main (test-eval.c:116)
==188==  If you believe this happened as a result of a stack
==188==  overflow in your program's main thread (unlikely but
==188==  possible), you can try to increase the size of the
==188==  main thread stack using the --main-stacksize= flag.
==188==  The main thread stack size used in this run was 8388608.
==188== 
==188== HEAP SUMMARY:
==188==     in use at exit: 864 bytes in 16 blocks
==188==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==188== 
==188== LEAK SUMMARY:
==188==    definitely lost: 0 bytes in 0 blocks
==188==    indirectly lost: 0 bytes in 0 blocks
==188==      possibly lost: 0 bytes in 0 blocks
==188==    still reachable: 864 bytes in 16 blocks
==188==         suppressed: 0 bytes in 0 blocks
==188== Rerun with --leak-check=full to see details of leaked memory
==188== 
==188== For counts of detected and suppressed errors, rerun with: -v
==188== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==193== Memcheck, a memory error detector
==193== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==193== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==193== Command: ./test-eval inp.4.txt
==193== Parent PID: 192
==193== 
==193== Invalid read of size 8
==193==    at 0x4017AD: is_straight_at (eval.c:81)
==193==    by 0x402688: describe_hand (test-eval.c:49)
==193==    by 0x402A2E: main (test-eval.c:116)
==193==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==193==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==193==    by 0x40103C: add_card_to (deck-c4.c:29)
==193==    by 0x403210: hand_from_string (input.c:49)
==193==    by 0x4029B3: main (test-eval.c:110)
==193== 
==193== Invalid read of size 4
==193==    at 0x4017B0: is_straight_at (eval.c:81)
==193==    by 0x402688: describe_hand (test-eval.c:49)
==193==    by 0x402A2E: main (test-eval.c:116)
==193==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==193== 
==193== 
==193== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==193==  Access not within mapped region at address 0x0
==193==    at 0x4017B0: is_straight_at (eval.c:81)
==193==    by 0x402688: describe_hand (test-eval.c:49)
==193==    by 0x402A2E: main (test-eval.c:116)
==193==  If you believe this happened as a result of a stack
==193==  overflow in your program's main thread (unlikely but
==193==  possible), you can try to increase the size of the
==193==  main thread stack using the --main-stacksize= flag.
==193==  The main thread stack size used in this run was 8388608.
==193== 
==193== HEAP SUMMARY:
==193==     in use at exit: 896 bytes in 18 blocks
==193==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==193== 
==193== LEAK SUMMARY:
==193==    definitely lost: 0 bytes in 0 blocks
==193==    indirectly lost: 0 bytes in 0 blocks
==193==      possibly lost: 0 bytes in 0 blocks
==193==    still reachable: 896 bytes in 18 blocks
==193==         suppressed: 0 bytes in 0 blocks
==193== Rerun with --leak-check=full to see details of leaked memory
==193== 
==193== For counts of detected and suppressed errors, rerun with: -v
==193== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==198== Memcheck, a memory error detector
==198== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==198== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==198== Command: ./test-eval inp.5.txt
==198== Parent PID: 197
==198== 
==198== Invalid read of size 8
==198==    at 0x4017AD: is_straight_at (eval.c:81)
==198==    by 0x402688: describe_hand (test-eval.c:49)
==198==    by 0x402A2E: main (test-eval.c:116)
==198==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==198==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==198==    by 0x40103C: add_card_to (deck-c4.c:29)
==198==    by 0x403210: hand_from_string (input.c:49)
==198==    by 0x4029B3: main (test-eval.c:110)
==198== 
==198== Invalid read of size 4
==198==    at 0x4017B0: is_straight_at (eval.c:81)
==198==    by 0x402688: describe_hand (test-eval.c:49)
==198==    by 0x402A2E: main (test-eval.c:116)
==198==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==198== 
==198== 
==198== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==198==  Access not within mapped region at address 0x0
==198==    at 0x4017B0: is_straight_at (eval.c:81)
==198==    by 0x402688: describe_hand (test-eval.c:49)
==198==    by 0x402A2E: main (test-eval.c:116)
==198==  If you believe this happened as a result of a stack
==198==  overflow in your program's main thread (unlikely but
==198==  possible), you can try to increase the size of the
==198==  main thread stack using the --main-stacksize= flag.
==198==  The main thread stack size used in this run was 8388608.
==198== 
==198== HEAP SUMMARY:
==198==     in use at exit: 864 bytes in 16 blocks
==198==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==198== 
==198== LEAK SUMMARY:
==198==    definitely lost: 0 bytes in 0 blocks
==198==    indirectly lost: 0 bytes in 0 blocks
==198==      possibly lost: 0 bytes in 0 blocks
==198==    still reachable: 864 bytes in 16 blocks
==198==         suppressed: 0 bytes in 0 blocks
==198== Rerun with --leak-check=full to see details of leaked memory
==198== 
==198== For counts of detected and suppressed errors, rerun with: -v
==198== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==203== Memcheck, a memory error detector
==203== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==203== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==203== Command: ./test-eval inp.6.txt
==203== Parent PID: 202
==203== 
==203== Invalid read of size 8
==203==    at 0x401906: is_straight_at (eval.c:90)
==203==    by 0x402651: describe_hand (test-eval.c:46)
==203==    by 0x402A2E: main (test-eval.c:116)
==203==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==203==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==203==    by 0x40103C: add_card_to (deck-c4.c:29)
==203==    by 0x403210: hand_from_string (input.c:49)
==203==    by 0x4029B3: main (test-eval.c:110)
==203== 
==203== Invalid read of size 4
==203==    at 0x401909: is_straight_at (eval.c:90)
==203==    by 0x402651: describe_hand (test-eval.c:46)
==203==    by 0x402A2E: main (test-eval.c:116)
==203==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==203== 
==203== 
==203== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==203==  Access not within mapped region at address 0x0
==203==    at 0x401909: is_straight_at (eval.c:90)
==203==    by 0x402651: describe_hand (test-eval.c:46)
==203==    by 0x402A2E: main (test-eval.c:116)
==203==  If you believe this happened as a result of a stack
==203==  overflow in your program's main thread (unlikely but
==203==  possible), you can try to increase the size of the
==203==  main thread stack using the --main-stacksize= flag.
==203==  The main thread stack size used in this run was 8388608.
==203== 
==203== HEAP SUMMARY:
==203==     in use at exit: 896 bytes in 18 blocks
==203==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==203== 
==203== LEAK SUMMARY:
==203==    definitely lost: 0 bytes in 0 blocks
==203==    indirectly lost: 0 bytes in 0 blocks
==203==      possibly lost: 0 bytes in 0 blocks
==203==    still reachable: 896 bytes in 18 blocks
==203==         suppressed: 0 bytes in 0 blocks
==203== Rerun with --leak-check=full to see details of leaked memory
==203== 
==203== For counts of detected and suppressed errors, rerun with: -v
==203== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==208== Memcheck, a memory error detector
==208== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==208== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==208== Command: ./test-eval inp.7.txt
==208== Parent PID: 207
==208== 
==208== Invalid read of size 8
==208==    at 0x4017AD: is_straight_at (eval.c:81)
==208==    by 0x402688: describe_hand (test-eval.c:49)
==208==    by 0x402A2E: main (test-eval.c:116)
==208==  Address 0x5205858 is 0 bytes after a block of size 56 alloc'd
==208==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==208==    by 0x40103C: add_card_to (deck-c4.c:29)
==208==    by 0x403210: hand_from_string (input.c:49)
==208==    by 0x4029B3: main (test-eval.c:110)
==208== 
==208== Invalid read of size 4
==208==    at 0x4017B0: is_straight_at (eval.c:81)
==208==    by 0x402688: describe_hand (test-eval.c:49)
==208==    by 0x402A2E: main (test-eval.c:116)
==208==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==208== 
==208== 
==208== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==208==  Access not within mapped region at address 0x0
==208==    at 0x4017B0: is_straight_at (eval.c:81)
==208==    by 0x402688: describe_hand (test-eval.c:49)
==208==    by 0x402A2E: main (test-eval.c:116)
==208==  If you believe this happened as a result of a stack
==208==  overflow in your program's main thread (unlikely but
==208==  possible), you can try to increase the size of the
==208==  main thread stack using the --main-stacksize= flag.
==208==  The main thread stack size used in this run was 8388608.
==208== 
==208== HEAP SUMMARY:
==208==     in use at exit: 928 bytes in 20 blocks
==208==   total heap usage: 34 allocs, 14 frees, 9,456 bytes allocated
==208== 
==208== LEAK SUMMARY:
==208==    definitely lost: 0 bytes in 0 blocks
==208==    indirectly lost: 0 bytes in 0 blocks
==208==      possibly lost: 0 bytes in 0 blocks
==208==    still reachable: 928 bytes in 20 blocks
==208==         suppressed: 0 bytes in 0 blocks
==208== Rerun with --leak-check=full to see details of leaked memory
==208== 
==208== For counts of detected and suppressed errors, rerun with: -v
==208== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==213== Memcheck, a memory error detector
==213== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==213== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==213== Command: ./test-eval inp.8.txt
==213== Parent PID: 212
==213== 
==213== Invalid read of size 8
==213==    at 0x4017AD: is_straight_at (eval.c:81)
==213==    by 0x402688: describe_hand (test-eval.c:49)
==213==    by 0x402A2E: main (test-eval.c:116)
==213==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==213==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==213==    by 0x40103C: add_card_to (deck-c4.c:29)
==213==    by 0x403210: hand_from_string (input.c:49)
==213==    by 0x4029B3: main (test-eval.c:110)
==213== 
==213== Invalid read of size 4
==213==    at 0x4017B0: is_straight_at (eval.c:81)
==213==    by 0x402688: describe_hand (test-eval.c:49)
==213==    by 0x402A2E: main (test-eval.c:116)
==213==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==213== 
==213== 
==213== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==213==  Access not within mapped region at address 0x0
==213==    at 0x4017B0: is_straight_at (eval.c:81)
==213==    by 0x402688: describe_hand (test-eval.c:49)
==213==    by 0x402A2E: main (test-eval.c:116)
==213==  If you believe this happened as a result of a stack
==213==  overflow in your program's main thread (unlikely but
==213==  possible), you can try to increase the size of the
==213==  main thread stack using the --main-stacksize= flag.
==213==  The main thread stack size used in this run was 8388608.
==213== 
==213== HEAP SUMMARY:
==213==     in use at exit: 896 bytes in 18 blocks
==213==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==213== 
==213== LEAK SUMMARY:
==213==    definitely lost: 0 bytes in 0 blocks
==213==    indirectly lost: 0 bytes in 0 blocks
==213==      possibly lost: 0 bytes in 0 blocks
==213==    still reachable: 896 bytes in 18 blocks
==213==         suppressed: 0 bytes in 0 blocks
==213== Rerun with --leak-check=full to see details of leaked memory
==213== 
==213== For counts of detected and suppressed errors, rerun with: -v
==213== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==218== Memcheck, a memory error detector
==218== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==218== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==218== Command: ./test-eval inp.9.txt
==218== Parent PID: 217
==218== 
==218== Invalid read of size 8
==218==    at 0x401906: is_straight_at (eval.c:90)
==218==    by 0x402651: describe_hand (test-eval.c:46)
==218==    by 0x402A2E: main (test-eval.c:116)
==218==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==218==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==218==    by 0x40103C: add_card_to (deck-c4.c:29)
==218==    by 0x403210: hand_from_string (input.c:49)
==218==    by 0x4029B3: main (test-eval.c:110)
==218== 
==218== Invalid read of size 4
==218==    at 0x401909: is_straight_at (eval.c:90)
==218==    by 0x402651: describe_hand (test-eval.c:46)
==218==    by 0x402A2E: main (test-eval.c:116)
==218==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==218== 
==218== 
==218== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==218==  Access not within mapped region at address 0x0
==218==    at 0x401909: is_straight_at (eval.c:90)
==218==    by 0x402651: describe_hand (test-eval.c:46)
==218==    by 0x402A2E: main (test-eval.c:116)
==218==  If you believe this happened as a result of a stack
==218==  overflow in your program's main thread (unlikely but
==218==  possible), you can try to increase the size of the
==218==  main thread stack using the --main-stacksize= flag.
==218==  The main thread stack size used in this run was 8388608.
==218== 
==218== HEAP SUMMARY:
==218==     in use at exit: 864 bytes in 16 blocks
==218==   total heap usage: 26 allocs, 10 frees, 9,216 bytes allocated
==218== 
==218== LEAK SUMMARY:
==218==    definitely lost: 0 bytes in 0 blocks
==218==    indirectly lost: 0 bytes in 0 blocks
==218==      possibly lost: 0 bytes in 0 blocks
==218==    still reachable: 864 bytes in 16 blocks
==218==         suppressed: 0 bytes in 0 blocks
==218== Rerun with --leak-check=full to see details of leaked memory
==218== 
==218== For counts of detected and suppressed errors, rerun with: -v
==218== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==223== Memcheck, a memory error detector
==223== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==223== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==223== Command: ./test-eval inp.10.txt
==223== Parent PID: 222
==223== 
==223== Invalid read of size 8
==223==    at 0x401906: is_straight_at (eval.c:90)
==223==    by 0x402651: describe_hand (test-eval.c:46)
==223==    by 0x402A2E: main (test-eval.c:116)
==223==  Address 0x5205790 is 0 bytes after a block of size 48 alloc'd
==223==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==223==    by 0x40103C: add_card_to (deck-c4.c:29)
==223==    by 0x403210: hand_from_string (input.c:49)
==223==    by 0x4029B3: main (test-eval.c:110)
==223== 
==223== Invalid read of size 4
==223==    at 0x401909: is_straight_at (eval.c:90)
==223==    by 0x402651: describe_hand (test-eval.c:46)
==223==    by 0x402A2E: main (test-eval.c:116)
==223==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==223== 
==223== 
==223== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==223==  Access not within mapped region at address 0x0
==223==    at 0x401909: is_straight_at (eval.c:90)
==223==    by 0x402651: describe_hand (test-eval.c:46)
==223==    by 0x402A2E: main (test-eval.c:116)
==223==  If you believe this happened as a result of a stack
==223==  overflow in your program's main thread (unlikely but
==223==  possible), you can try to increase the size of the
==223==  main thread stack using the --main-stacksize= flag.
==223==  The main thread stack size used in this run was 8388608.
==223== 
==223== HEAP SUMMARY:
==223==     in use at exit: 896 bytes in 18 blocks
==223==   total heap usage: 30 allocs, 12 frees, 9,328 bytes allocated
==223== 
==223== LEAK SUMMARY:
==223==    definitely lost: 0 bytes in 0 blocks
==223==    indirectly lost: 0 bytes in 0 blocks
==223==      possibly lost: 0 bytes in 0 blocks
==223==    still reachable: 896 bytes in 18 blocks
==223==         suppressed: 0 bytes in 0 blocks
==223== Rerun with --leak-check=full to see details of leaked memory
==223== 
==223== For counts of detected and suppressed errors, rerun with: -v
==223== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
